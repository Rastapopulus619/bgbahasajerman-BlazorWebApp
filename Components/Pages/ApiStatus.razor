@page "/apistatus"
@rendermode InteractiveServer
@inject HttpClient Http

<h3>API Connectivity Test</h3>

<p><strong>API Base URL:</strong> @Http.BaseAddress</p>
<p><strong>Button clicks:</strong> @clickCount</p>
<p><strong>Current Time:</strong> @currentTime</p>
<p>Current render time: @DateTime.Now.ToString("HH:mm:ss.fff")</p>

<button class="btn btn-primary" @onclick="TestButtonClick">
    Test Button (Clicks: @clickCount)
</button>

<button class="btn btn-secondary" @onclick="CheckApi" disabled="@isLoading">
    @if (isLoading)
    {
        <span>Checking... (@clickCount)</span>
    }
    else
    {
        <span>Check API</span>
    }
</button>
<button @onclick="() => InvokeAsync(StateHasChanged)">Force Re-render</button>

<!-- Debug info -->
<div class="mt-3">
    <h4>Debug Info:</h4>
    <ul>
        <li>isLoading: @isLoading</li>
        <li>error: @(error ?? "null")</li>
        <li>greeting: @(greeting ?? "null")</li>
        <li>clickCount: @clickCount</li>
        <li>Last update: @currentTime</li>
    </ul>
</div>

@if (isLoading)
{
    <div class="alert alert-info mt-3">Loading...</div>
}

@if (error is not null)
{
    <div class="alert alert-danger mt-3">
        <strong>Error:</strong> @error
    </div>
    <div class="alert alert-warning mt-3">
        <strong>Fallback value:</strong> @greeting
    </div>
}

@if (greeting is not null && error is null)
{
    <div class="alert alert-success mt-3">
        <strong>Success!</strong> @greeting
    </div>
}

@code {
    private string? greeting;
    private string? error;
    private bool isLoading;
    private int clickCount = 0;
    private string currentTime = DateTime.Now.ToString("HH:mm:ss");
    private readonly string fallbackGreeting = "API unreachable - fallback greeting shown.";

    private void TestButtonClick()
    {
        clickCount++;
        currentTime = DateTime.Now.ToString("HH:mm:ss");
        Console.WriteLine($"Button clicked! Count: {clickCount} at {currentTime}");
        StateHasChanged();
    }

    private async Task CheckApi()
    {
        clickCount++;
        currentTime = DateTime.Now.ToString("HH:mm:ss");
        greeting = null;
        error = null;
        isLoading = true;
        Console.WriteLine($"API Check started! Count: {clickCount} at {currentTime}");
        StateHasChanged();

        try
        {
            // Add a delay to see the loading state
            await Task.Delay(1000);
            greeting = await Http.GetStringAsync("Mock/greeting");
            Console.WriteLine($"API Response: {greeting}");
        }
        catch (Exception ex)
        {
            error = ex.Message;
            greeting = fallbackGreeting;
            Console.WriteLine($"API Error: {error}");
        }
        finally
        {
            isLoading = false;
            currentTime = DateTime.Now.ToString("HH:mm:ss");
            StateHasChanged();
        }
    }
}